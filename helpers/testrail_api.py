#
# TestRail API binding for Python 2.x (API v2, available since
# TestRail 3.0)
#
# Learn more:
#
# http://docs.gurock.com/testrail-api2/start
# http://docs.gurock.com/testrail-api2/accessing
#
# Copyright Gurock Software GmbH. See license.md for details.
#

import base64
import datetime
import json
import urllib2


class TetsRailAPIClient:
    def __init__(self, base_url):
        self.user = ''
        self.password = ''
        if not base_url.endswith('/'):
            base_url += '/'
        self.__url = base_url + 'index.php?/api/v2/'

    #
    # Send Get
    #
    # Issues a GET request (read) against the API and returns the result
    # (as Python dict).
    #
    # Arguments:
    #
    # uri                 The API method to call including parameters
    #                     (e.g. get_case/1)
    #
    def send_get(self, uri):
        return self.__send_request('GET', uri, None)

    #
    # Send POST
    #
    # Issues a POST request (write) against the API and returns the result
    # (as Python dict).
    #
    # Arguments:
    #
    # uri                 The API method to call including parameters
    #                     (e.g. add_case/1)
    # data                The data to submit as part of the request (as
    #                     Python dict, strings must be UTF-8 encoded)
    #
    def send_post(self, uri, data):
        return self.__send_request('POST', uri, data)

    def __send_request(self, method, uri, data):
        url = self.__url + uri
        request = urllib2.Request(url)
        if (method == 'POST'):
            request.add_data(json.dumps(data))
        auth = base64.b64encode('%s:%s' % (self.user, self.password))
        request.add_header('Authorization', 'Basic %s' % auth)
        request.add_header('Content-Type', 'application/json')
        request.add_header('Accept', 'application/json')

        e = None
        try:
            response = urllib2.urlopen(request).read()
        except urllib2.HTTPError as e:
            response = e.read()

        if response:
            result = json.loads(response)
        else:
            result = {}

        if e != None:
            if result and 'error' in result:
                error = '"' + result['error'] + '"'
            else:
                error = 'No additional error message received'
            raise APIError('TestRail API returned HTTP %s (%s)' %
                           (e.code, error))

        return result


class APIError(Exception):
    pass


class TestRailRun:
    def __init__(self, conf):
        print "Call TestRailRun"
        self.conf = conf
        # test rail credentials
        self.tr_api_client = TetsRailAPIClient(conf["testrail_url"])
        self.tr_api_client.user = conf["test_rail_auth_login"]
        self.tr_api_client.password = conf["test_rail_auth_pass"]

        # check out our test suit
        self.tr_test_suite = self.tr_api_client.send_get(
            "get_suite/{}".format(conf["test_rail_suite_id"]))

        if not self.tr_test_suite:
            raise Exception(
                "Test rail suit {} dont exist".format(
                    conf["test_rail_suite_id"]))

        test_run_name = "{} {} #{} {}".format(
            conf["openstack_version"],
            self.tr_test_suite["name"],
            conf["openstack_build"],
            datetime.datetime.today().strftime('%m/%d/%Y %H:%M')
        )

        self.user_for_assign = self.tr_api_client.send_get(
            "get_user_by_email&email={}".format(self.tr_api_client.user))

        if not self.user_for_assign:
            raise Exception("No user for assign")

        # creating new run with all included test cases
        self.tr_new_run = self.tr_api_client.send_post(
            "add_run/{}".format(conf["test_rail_project_id"],
                                conf["test_rail_suite_id"]),
            {'suite_id': conf["test_rail_suite_id"], 'name': test_run_name,
             'description': 'Autogenerated test run',
             'milestone_id': conf["openstack_milestone_id"],
             'assignedto_id': self.user_for_assign["id"], 'include_all': True})

        # hack run id
        # self.tr_new_run = {"id": 18250}

    def add_result(self, test_case_id, percentile, time_elapsed_sec):
        """Check that test case with test_case_id is exists and add result for it.
        Also getting expected result value from test case.
        """
        # we must get expected result value for comparing
        # also we need to check that test case is exists
        test_case = self.tr_api_client.send_get(
            "get_case/{}".format(test_case_id))

        expected_value = self.conf["expected_defaul_value"]

        # no test case? go next
        if not test_case:
            return

        # get custom expected value
        if len(test_case["custom_test_case_steps"]) > 0:
            expected_value = float(
                test_case["custom_test_case_steps"][0]['expected'])

        # send test result for tr_new_run["id"] rail test run for test_case_id
        self.tr_api_client.send_post(
            "add_result_for_case/{}/{}".format(self.tr_new_run["id"],
                                               test_case_id),
            {
                "status_id": 5 if percentile > expected_value else 1,
                "comment": "",
                "version": "{}#{}".format(self.conf["openstack_version"],
                                          self.conf["openstack_build"]),
                "elapsed": "{}s".format(time_elapsed_sec),
                "assignedto_id": self.user_for_assign["id"],
                "custom_test_case_steps_results": [
                    {
                        "content": "Check [response_time; 90_percentile_s]",
                        "expected": "Expected Result {}".format(
                            expected_value),
                        "actual": "%.1f sec" % percentile,
                        "status_id": 5 if percentile > expected_value else 1
                    },
                ]
            }
        )
